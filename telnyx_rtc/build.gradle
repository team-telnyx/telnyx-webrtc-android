plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'org.jetbrains.dokka'
    id 'maven-publish'
    id 'kotlin-android-extensions'
    id 'io.gitlab.arturbosch.detekt'
}

apply plugin: 'maven-publish'
apply plugin: "com.bugsnag.android.gradle"
apply plugin: 'io.gitlab.arturbosch.detekt'

def getVersionName = { ->
    return "0.0.25"
}

def getArtifactId = { ->
    return "telnyx_rtc"
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

publishing {
    publications {
        bar(MavenPublication) {
            groupId 'com.telnyx.webrtc.sdk.telnyx_rtc'
            artifactId getArtifactId()
            version getVersionName()
            artifact("$buildDir/outputs/aar/${getArtifactId()}-release.aar")
            artifact(sourceJar)
            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')
                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return // ignore invalid dependencies
                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)
                    if (!dep.transitive) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
                configurations.compile.getDependencies().each { dep -> addDependency(dep, "compile") }

                configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }

                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
            }
        }
    }
}


dokkaHtml.configure {
    dokkaSourceSets {
        named("main") {
            noAndroidSdkLink.set(false)
        }
    }
}


android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    androidExtensions {
        experimental = true
    }

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'proguard-rules.txt'

        buildConfigField ("double", "SDK_VERSION", versionName)
        buildConfigField "java.util.concurrent.atomic.AtomicBoolean", "IS_TESTING", "new java.util.concurrent.atomic.AtomicBoolean(false)"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            jniDebuggable true
        }
        debug {
            testCoverageEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable true
            jniDebuggable true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true
            unitTests.all {
                if (name == "testDebugUnitTest" || name == "testReleaseUnitTest") {
                    kover {
                        excludes = ["com\\.telnyx\\.webrtc\\.sdk\\.peer\\..*"] //Can't mock native code, these methods will be tested via instrumentation instead.
                    }
                }
            }
    }
    sourceSets {
        test.manifest.srcFile "src/main/AndroidManifest.xml"
    }
}

detekt {
    buildUponDefaultConfig = true // preconfigure defaults
    allRules = false // activate all available (even unstable) rules.
    config = files("$projectDir/config/detekt.yml") // point to your custom config defining rules to run, overwriting default behavior
    baseline = file("$projectDir/config/baseline.xml") // a way of suppressing issues before introducing detekt

    reports {
        html.enabled = true // observe findings in your browser with structure and code snippets
        xml.enabled = true // checkstyle like format mainly for integrations like Jenkins
        txt.enabled = true // similar to the console output, contains issue signature to manually edit baseline files
        sarif.enabled = true // standardized SARIF format (https://sarifweb.azurewebsites.net/) to support integrations with Github Code Scanning
    }
}

tasks.koverHtmlReport {
    enabled = true                          // false to disable report generation
    htmlReportDir.set(layout.buildDirectory.dir("my-reports/html-result"))
}

tasks.koverXmlReport {
    enabled = true                          // false to disable report generation
    xmlReportFile.set(layout.buildDirectory.file("my-reports/result.xml"))
}

dependencies {

    implementation deps.kotlin.stdlib
    implementation deps.androidx_core
    implementation deps.appcompat
    implementation deps.material
    implementation deps.constraint_layout

    implementation deps.webrtc

    implementation deps.gson
    implementation deps.retrofit.runtime
    implementation deps.retrofit.gson


    implementation deps.coroutines.core
    implementation deps.coroutines.android

    implementation deps.websocket

    implementation deps.okhttp
    implementation deps.interceptor

    implementation deps.ktor.android
    implementation deps.ktor.cio
    implementation deps.ktor.gson
    implementation deps.ktor.websockets
    implementation deps.ktor.okhttp
    implementation 'androidx.lifecycle:lifecycle-process:2.4.0'
    testImplementation deps.ktor.client_test

    implementation 'org.jetbrains.kotlin:kotlin-android-extensions-runtime:1.6.0'


    //BugSnag:
    implementation "com.bugsnag:bugsnag-android:5.+"

    // Volley
    implementation deps.volley

    // Firebase
    implementation platform(deps.firebasebom)
    implementation deps.firebase_analytics
    implementation deps.firebase_messaging

    // Timber
    implementation deps.timber

    //permissions
    implementation deps.dexter

    implementation deps.hilt.android
    kapt deps.hilt.compiler

    //Testing:
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.2'
    testImplementation('org.robolectric:robolectric:4.7.3') {
        exclude group: 'com.google.protobuf'
    }
    testImplementation "io.mockk:mockk:1.12.1"
    testImplementation "com.squareup.okhttp3:mockwebserver:4.9.3"
    testImplementation 'org.hamcrest:hamcrest-library:2.2'

    // jUnit 4
    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.junit.vintage:junit-vintage-engine:5.8.2"
    testImplementation "androidx.test:core-ktx:1.4.0"

    // jUnit 5
    def jupiter_version = "5.8.2"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiter_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$jupiter_version"

    def kotest_version = "5.0.2"
    testImplementation "io.kotest:kotest-runner-junit5:$kotest_version"
    testImplementation "io.kotest:kotest-assertions-core-jvm:$kotest_version"
    testImplementation "io.kotest:kotest-property-jvm:$kotest_version"
    androidTestImplementation "io.kotest:kotest-assertions-core-jvm:$kotest_version"
    androidTestImplementation "io.kotest:kotest-property-jvm:$kotest_version"

    testImplementation "org.slf4j:slf4j-nop:1.7.32"

    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    // Testing - Instrumentation
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    testImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.ext:truth:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.work:work-testing:2.7.1'
    androidTestImplementation "io.mockk:mockk-android:1.12.1"
    debugImplementation 'androidx.fragment:fragment-testing:1.4.0'
    debugImplementation 'androidx.test:core-ktx:1.4.0'

    testImplementation "org.mockito:mockito-inline:4.1.0"
    androidTestImplementation "org.mockito:mockito-android:4.1.0"

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}